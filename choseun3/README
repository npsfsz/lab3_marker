
#Hong Il Kwon, 999617721, hongil.kwon@mail.utoronto.ca
#Seunghyun Cho, 1001681325, sherwin.cho@mail.utoronto.ca

Generate QR code Implementation
	- Parse user inputs AccountName, Issuer, Secret HEX
	- Encode them to make a valid QR URI arguments
	- URI-encode AccountName and Issuer to properly format and encode special characters
	- Secret HEX user input, from 8-bit char array, is converted into byte array with each HEX number converted to integer array and then do base-32 encoding
	- Using proper URI with counter value and time step generate QR code for HOTP and TOTP respectively

Validate QR code Implementation
	- Convert secret_hex, which is a string of 20 hex characters, to a byte array of size Compute HMAC by:
		- SHA1(key ^ Opad, SHA1(key ^ Ipad, M))
		- Where Ipad is 0x36, Opad 0x5C
		- M is a counter value for HOTP and a number of time step passed for TOTP
	- Convert to binary value. The OTP will be the first 6 digits of the value
	- Check validity by comparing this value to the given HOTP/TOTP from user

