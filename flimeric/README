# Chengping Liang, 999665385, chengping.liang@mail.utoronto.ca
# Eric Flim, 999945163, eric.flim@mail.utoronto.ca

generateQRcode.c

First from the command line, the program gets the three inputs which are the issuer, account name, and secret hex, respectively.
Then, the issue and account name are encoded with the encoding function urlEncode.
To encode the secret hex, a uint8_t data array is constructed with the secret hex array.
After the conversion, the secret hex is encoded with base32_encode. Finally, the QR codes are displayed with the encoded information. 

validateQRcode.c

ValidateHOTP and ValitadeTOTP are exactly the same except for the first value 't', used in the hash. 
First the secret_hex supplied is padded according to the spec, and put into the key 'k' in its binary form. 
Then, the ipad and ipad are created by bitwise xor-ing k with hex 36 and 5c respectively, one byte at a time. 
Next, the parameter for hashing is put into the bc array depeinding on which algorithm is being used. 
For TOTP, the time based value is used (and rounded in 30 second increments, according to the spec default)
For HOTP, the parameter is not time based and is simply the number 1.  
Then, the hash is performed first with the ipad, and then again on result with the opad, as covered in class. 
Now, it is time to confirm that the hashed value matches the given value. 
The lower 6 bits are taken and compared, and the result is returned.
