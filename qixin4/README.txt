#XIN QI, 1000026740, x.qi@mail.utoronto.ca 
For part 1, "generateQRCode.c" is used to generate the QR code. First we get the encodedurl for account name and issuer. After that we have to ensure that the hex secret we have received is 20 characters (from the handout its "12345678901234567890").To do so, we set a secretCount variable to count the length of the hex secret. if the length is less than 20, we have a function "paddingfunctionLess" which creates a 20 character secret, take in the existing one which is less than 20, and pad the rest with '0' to make sure its 20 characters. If the length is more than 20, we have a function "paddingfunctionMore" which cut the hex secret to 20 characters. After making sure hex_secret is 20 characters,  we convert the hex_secret into byte array and encode it with base32 encoding. After we have all the required information, we than build the strings required for the 2 QR codes. And lastly generate the 2 QR codes.


For part 2, "validateQRcode.c" is used to generate the HOTP and TOTP values with the secret and verify if the user has provided the correct values. There are 2 main parts for this, first is to valide the HOTP, second is to validate the TOTP. For both validating HOTP and TOTP, we have to first make sure that the hex_secret inputted by the user is 20 characters, this is done in the same way as how we checked in part 1 (see part 1 explaination for details). For validating the HOTP, after we checked the 20 characters, we compute the HMAC which is done with the SHA1 skeleton functions provided in the handout. SHA1(key XOR opad, SHA1(key XOR ipad, message)). After this, we find the inner part of the digest by padding the full 64 bytes and perform XOR operation on each byte with 0x36. Then we compute the outer part of the digest by padding the full 64 bytes and XORing each byte with 0x5c. Then we compute the inner digest and the outter digest. Converting the outer digest to a binary value. The first 6 digits are the final result. Compare with the input string for validation. The second step is to validate the TOTP. After checking the 20 characters, compute the HMAC with SHA1(key XOR opad, SHA1(key XOR ipad, message)). Then compute the inner and then the outter digest. converting the outter digest to a binary value. The first 6 digits are the final result. Compare with the given TOTP string to get TOTP validation. 