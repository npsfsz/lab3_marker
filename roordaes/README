#Esther Roorda, 999673848, esther.roorda@mail.utoronto.ca

generateQRcode.c :
     generateQRcode <issuer> <accountName> <secretHex>
     Given the issuer, account name and secret in hex form, 
     generateQRcode creates a QR URL and associated barcode. 
     This is done as follows:
     	  - The secret is padded to 20 bytes. 
          - The secret is converted from a string in hex 
            form to a binary array. 
          - base32_encode is used to create a string in 
	    base 32. 
          - A URL path is created using the issuer, account
            name and base32 string. 
          - The URL is printed and the associated barcode
            is displayed using displayQRcode()

validateQRcode.c :
     validateQRcode <secretHex> <HOTP_value> <TOTP_value>
     Given a secret in hexadecimal form, a HOTP_value and
     a TOTP_value, validateQRcode generates the HOTP and
     TOTP of the given secret and determines whether they
     match the given HOTP and TOTP values.
     	  - The secret is padded to 20 bytes.
          - A binary 'message' is calculated based on either
            the current time for TOTP or the value 1 for
            HOTP, based on the HOTP and TOTP documentation.  
          - The secret is converted from a string in hex 
            form to a binary array. 
          - An HMAC is formed from the secret and message
            as described in lecture slides. 
          - This HMAC is reduced to 6 digits as specified
            in the HOTP and TOTP documentation. 
          - THe final 6 digit value is compared to the 
            input HOTP/TOTP value, converted to a bin array. 