#Ivan Cheung, 999670994, ivan.cheung@mail.utoronto.ca
#Albertina Bao, 1000057421, alby.bao@mail.utoronto.ca

ECE568 Lab 3

Part 1: Generate QR Code

- Encode the account name and issuer input string parameters with the provided urlEncode(). 
- To encode the secret hex, convert the string into a byte array (hex) representation, then use the provided base32_encode().
- Combine all the encoded inputs into the appropriate url for HOTP and TOTP respectively to generate the associated QR codes.  

Part 2: Validate QR Code

Validate HOTP:
- Compute a data byte array from the counter (always set to 1)
- Compute the truncated HMAC value (seen below)
- Compare the computed HMAC against the user inputed HOTP value

Validate TOTP:
- Compute a data byte array from the current time, with period 30 seconds. 
- Compute the truncated HMAC value (seen below)
- Compare the computed HMAC against the user inputed TOTP value

Compute HMAC-SHA1: 
HMAC = SHA1[(k xor opad) || SHA1((k xor ipad) || data)];
- Convert secret_hex string of 20 hex characters to an array of bytes.
- Compute the inner and outer padding, with the size of each being the blocksize of SHA1 (64), given the key (10 byte array). 
    - inner padding =  k xor ipad, where ipad = 0x36 repeating
    - outer padding =  k xor opad, where opad = 0x5C repeating
- Compute the inner hash with SHA1 from the inner padding and the data passed from the functions above
- Compute the outer hash with SHA1 from the outer padding and the inner hash
- The result of SHA1 is 20 bytes, so truncate the result to 6 binary digits and return the truncated hash.
