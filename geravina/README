#Vinay Gera, 999389451, vinay.gera@mail.utoronto.ca


Lab - Part 1: (Generate QR Code)

Encoded the account name and issuer via urlEncode function, it removed spaces and special characters. Then, code ensures that secret hex input is padded to size of 20 characters.
Then secret_hex is converted to a byte array by processing 4 bits at a time and converting it to the integer value. Once the byte array form of secret hex is created, base32_encode() function is used on the byte array to encode to base 32 string.
Then, oPathURL is generated for HOTP and TOTP and their QR code is genereated using displayQRCode function.


Lab - Part 2: (Validate QR Code)

Checked and ensured that the passed in secret is 20 characters long by padding trailing zeroes. Then converted the secret hex string to byte array by processing 4 bits and converting it to integer value. (Same as encoding process in part 1.). The byte array form is required by sha1_update function. 
HMAC is then computed using following formula mentioned in class (HMAC = SHA(K XOR outerpadding, SHA(K XOR innerpadding, text))). 
Inner padding and outer padding is computed using the instructions in RFC 2104 document.
Inner padding is computed by doing an XOR of each byte of secret key with 0x36.
Outer padding is computed by doing an XOR of each byte of secrey key with Ox5C.
Further, sha1_update is called once to compute the first hash with inner padding buffer and counter for HOTP and with timer for TOTP. Then called second time on first hash and outer padding to compute the final HMAC value. Finally, HMAC is truncated to 6 digits and compared with TOTP and HOTP as final validation.

