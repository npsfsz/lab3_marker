#Pankaj Singh, 1001407925, peter.singh@mail.utoronto.ca
#Akshay Kawlay, 1001104075, ak.kawlay@mail.utoronto.ca

Part 1: generateQRCode.c

First we padded secret_hex string with 0â€™s to size 20 characters.
Next we converted secret_hex (string of 20 characters) to byte array 
using switch statement.
Then we compressed the uint8_t array to half its size using left shift operator (<<) 
and bitwise OR (|) operator.
We used the base32_encode function to encode our secret hex code.
We also used urlEncode function to encode the accountName and issuer information.
Finally, we pluged the three strings in sprintf to create a string or otpauth which we passed into 
the displayQRcode() function to generate the QR code

Part 2: validateQRCode.c

Validate HOTP:
First we converted secret_hex (string of 20 characters) to byte array.
Which is 10 byte long.
Computed the HMAC using SHA1
Inner part block created by padding the key to the length of 64 bytes XORed wit 0x36 (0'b00110110)
Similarly outer part is create XORed with 0x5c (0'b01011100)
Inner and outer Digests are computed using concatenation of inner and outer block and a counter.
which gives 20 byte digest.
Outer and inner digest are used to find a 6 digit result.
This result is compared with HOTP given.


Validate TOTP:
All steps are same as above
Current time is computed using (time()/30) and result is stored in 8 byte array.
Inner digest is computed using stored result array.
Twenty bye digest is obtained.
Rest is as in HOTP validation.

